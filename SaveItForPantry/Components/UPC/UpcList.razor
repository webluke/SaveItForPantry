@page "/upcs"
@using SaveItForPantry.Data
@using SaveItForPantry.Services
@using MudBlazor
@using SaveItForPantry.Components.UPC
@inject UpcService UpcService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>UPC List</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">UPC List</MudText>

<div style="margin-bottom:1rem;">
    <MudAutocomplete T="UpcData" Label="Search" @bind-Value="selectedUpc" SearchFunc="@SearchUpcs"
                     ToStringFunc="@(u => u?.Title ?? u?.Upc ?? string.Empty)" PreserveText="true">
        <NotFoundContent>
            <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" @onclick="AddNewUpc">Add New UPC</MudButton>
        </NotFoundContent>
    </MudAutocomplete>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" @onclick="ShowAddUpcFlowDialog">Add UPC</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" @onclick="ShowScanBarcodeDialog">Scan Barcode</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" @onclick="LoadAllAsync">Clear</MudButton>
</div>

@if (items is null)
{
    <p>Loading...</p>
}
else if (items.Length == 0)
{
    <p>No UPCs found.</p>
    @if (!string.IsNullOrWhiteSpace(searchTerm))
    {
        <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewUpc">Add New UPC</MudButton>
    }
}
else
{
    <MudTable Items="items" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>UPC</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Brand</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="UPC">@context.Upc</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Brand">@context.Brand</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditUpc(context)">Edit</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => RemoveUpc(context)">Remove</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
</MudContainer>
@code {
    private UpcData[]? items;
    private UpcData? selectedUpc;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAllAsync();
    }

    private async Task LoadAllAsync()
    {
        items = await UpcService.GetAllAsync();
        selectedUpc = null;
        searchTerm = "";
        StateHasChanged();
    }

    private async Task<IEnumerable<UpcData>> SearchUpcs(string value, CancellationToken token)
    {
        searchTerm = value;
        if (string.IsNullOrWhiteSpace(value))
        {
            return Enumerable.Empty<UpcData>();
        }
        return await UpcService.SearchLocalAsync(value);
    }

    private async void ShowScanBarcodeDialog()
    {
        var dialog = await DialogService.ShowAsync<ScanBarcodeDialog>("Scan Barcode");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var parameters = new DialogParameters { ["upcToSearch"] = result.Data.ToString() };
            var addDialog = await DialogService.ShowAsync<AddUpcFlowDialog>("Add UPC", parameters);
            var addResult = await addDialog.Result;

            if (!addResult.Canceled)
            {
                await LoadAllAsync();
            }
        }
    }

    private async void ShowAddUpcFlowDialog()
    {
        var dialog = await DialogService.ShowAsync<AddUpcFlowDialog>("Add UPC");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadAllAsync();
        }
    }

    private async void AddNewUpc()
    {
        var parameters = new DialogParameters { ["Upc"] = searchTerm };
        var dialog = await DialogService.ShowAsync<SearchApiAndAddUpcDialog>("Add New UPC", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadAllAsync();
        }
    }

    private async void EditUpc(UpcData upc)
    {
        var parameters = new DialogParameters { ["UpcData"] = upc };
        var dialog = await DialogService.ShowAsync<EditUpcDialog>("Edit UPC", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadAllAsync();
        }
    }

    private async void RemoveUpc(UpcData upc)
    {
        var yesNo = await DialogService.ShowMessageBox(
            "Confirm Removal",
            "Are you sure you want to remove this UPC?",
            yesText: "Remove", cancelText: "Cancel");

        if (yesNo == true)
        {
            await UpcService.DeleteAsync(upc);
            await LoadAllAsync();
        }
    }
}