@page "/"

@using SaveItForPantry.Data
@using SaveItForPantry.Services
@using System.Linq
@using MudBlazor
@inject LocationService LocationService
@inject ShoppingListService ShoppingListService
@inject NavigationManager NavigationManager
@implements IDisposable
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Pantry Dashboard</MudText>

    @if (locations == null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (!locations.Any())
    {
        <MudAlert Severity="Severity.Info">No locations set up yet. <MudLink Href="/locations">Create a location</MudLink></MudAlert>
    }
    else
    {
        <!-- Shopping Lists -->
        <MudText Typo="Typo.h5" GutterBottom="true" Class="mt-4">Shopping Lists</MudText>
        @if (shoppingLists == null)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
        }
        else if (!shoppingLists.Any())
        {
            <MudAlert Severity="Severity.Info">No shopping lists yet. <MudLink Href="/shoppinglists">Create a shopping list</MudLink></MudAlert>
        }
        else
        {
            <MudTable Items="shoppingLists" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Items Count</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => NavigateToShoppingList(context.Id)">@context.Name</MudButton>
                    </MudTd>
                    <MudTd DataLabel="Items Count">@context.Items.Count</MudTd>
                </RowTemplate>
            </MudTable>
        }

        <!-- Expiring Items -->
        <MudText Typo="Typo.h5" GutterBottom="true" Class="mt-4">Items Expiring Soon (within 28 days)</MudText>
        @if (!expiringItems.Any())
        {
            <MudAlert Severity="Severity.Success">No items expiring soon!</MudAlert>
        }
        else
        {
            <MudTable Items="@expiringItems" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(locations == null)">
                <HeaderContent>
                    <MudTh>Location</MudTh>
                    <MudTh>Short ID</MudTh>
                    <MudTh>Item</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Expires On</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.LocationName</MudTd>
                    <MudTd>@context.ShortId</MudTd>
                    <MudTd>@context.ItemTitle</MudTd>
                    <MudTd>@context.Quantity</MudTd>
                    <MudTd>@context.ExpirationDate.ToString("MMM dd, yyyy")</MudTd>
                </RowTemplate>
            </MudTable>
        }

        <!-- Location Item Counts -->
        <MudText Typo="Typo.h5" GutterBottom="true" Class="mt-4">Items per Location</MudText>
        <MudTable Items="locations" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Items Count</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => NavigateToLocation(context.Id)">@context.Name</MudButton>
                </MudTd>
                <MudTd DataLabel="Items Count">@context.LocationItems.Count</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private List<Location>? locations;
    private List<LocationSummary> locationSummaries = new();
    private List<ExpiringItem> expiringItems = new();
    private List<ShoppingList>? shoppingLists;

    protected override async Task OnInitializedAsync()
    {
        locations = await LocationService.GetLocationsAsync();
        shoppingLists = await ShoppingListService.GetShoppingListsAsync();
        if (locations != null)
        {
            locationSummaries = locations.Select(l => new LocationSummary { Name = l.Name, Count = l.LocationItems.Count }).ToList();

            var now = DateTime.UtcNow;
            var soon = now.AddDays(28);
            expiringItems = locations
                .SelectMany(l => l.LocationItems
                    .Where(li => li.ExpirationDate.HasValue && li.ExpirationDate.Value <= soon)
                    .Select(li => new ExpiringItem
                    {
                        LocationName = l.Name,
                        ItemTitle = li.UpcData?.Title ?? "Unknown",
                        ExpirationDate = li.ExpirationDate!.Value,
                        Quantity = li.Quantity,
                        ShortId = li.ShortId
                    }))
                .OrderBy(e => e.ExpirationDate)
                .ToList();
        }
    }

    private void NavigateToLocation(int id)
    {
        NavigationManager.NavigateTo($"/locations/{id}");
    }

    private void NavigateToShoppingList(int id)
    {
        NavigationManager.NavigateTo($"/shoppinglists/{id}");
    }

    public class LocationSummary
    {
        public string Name { get; set; } = "";
        public int Count { get; set; }
    }

    public class ExpiringItem
    {
        public string LocationName { get; set; } = "";
        public string ItemTitle { get; set; } = "";
        public int Quantity { get; set; }
        public DateTime ExpirationDate { get; set; }
        public string ShortId { get; set; } = "";
    }

    public void Dispose() { }
}
