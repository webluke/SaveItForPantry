@page "/shoppinglists/{Id:int}"
@using SaveItForPantry.Data
@using SaveItForPantry.Services
@using MudBlazor
@using SaveItForPantry.Components.UPC
@using Microsoft.JSInterop
@inject ShoppingListService ShoppingListService
@inject UpcService UpcService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<script src="js/print.js"></script>

<PageTitle>Shopping List Details</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Shopping List Details</MudText>
@if (shoppingList == null)
{
    <MudAlert Severity="Severity.Info">Loading . . . </MudAlert>
}
else
{
    <MudText Typo="Typo.h4">@shoppingList.Name</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => AddItemToList()">Add Item to List</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="ShowScanBarcodeDialog">Scan Barcode</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="PrintShoppingList">Print</MudButton>
    <MudButton  Variant="Variant.Filled" Color="Color.Secondary" @onclick="Back">Back</MudButton>

    @if (shoppingList.Items.Count == 0)
    {
            <MudAlert Severity="Severity.Info">No Items in This Shopping List Yet.</MudAlert>
    }
    else
    {

            <MudTable Items="shoppingList.Items" Hover="true" Class="fill-height" Breakpoint="Breakpoint.Md">
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>UPC</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Quantity To Buy</MudTh>
                <MudTh>In Cart</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Image">
                    <div class="thumbnail-container">
                        @if (context.UpcData != null && !string.IsNullOrWhiteSpace(context.UpcData.ImageUrl))
                        {
                            <img src="@context.UpcData.ImageUrl" class="thumbnail" />
                            <img src="@context.UpcData.ImageUrl" class="enlarged" />
                        }
                        else
                        {
                            <div class="thumbnail">No Image</div>
                        }
                    </div>
                </MudTd>
                <MudTd DataLabel="UPC">@(context.UpcData?.Upc ?? "N/A")</MudTd>
                <MudTd DataLabel="Title">@(context.UpcData?.Title ?? "Unknown")</MudTd>
                <MudTd DataLabel="Quantity To Buy">@context.Quantity</MudTd>
                <MudTd DataLabel="In Cart">
                    <MudSwitch @bind-Value="@context.InCart" @onclick="() => UpdateInCart(context)" Color="Color.Primary" />
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" @onclick="() => EditItem(context)">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" @onclick="() => RemoveItem(context)">Remove</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
}
</MudContainer>
@code {
    [Parameter] 
    public int Id { get; set; }

    private ShoppingList? shoppingList;

    protected override async Task OnInitializedAsync()
    {
        await LoadShoppingListAsync();
    }

    private async Task LoadShoppingListAsync()
    {
        shoppingList = await ShoppingListService.GetShoppingListByIdAsync(Id);
    }

    private async Task AddItemToList(string upc = "")
    {
        var parameters = new DialogParameters
        {
            ["ShoppingListId"] = Id
        };
        if (!string.IsNullOrWhiteSpace(upc))
        {
            parameters["Upc"] = upc;
        }
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddItemToShoppingListDialog>("Add Item to Shopping List", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var dialogData = (AddItemToShoppingListDialog.DialogResultData)result.Data;
            if (dialogData != null)
            {
                try
                {
                    var upcData = await UpcService.GetUpcDataByUpcAsync(dialogData.Upc);
                    if (upcData != null)
                    {
                        await ShoppingListService.AddItemToShoppingListAsync(
                            dialogData.ShoppingListId,
                            upcData.Id,
                            dialogData.Quantity
                        );
                        Snackbar.Add("Item added to list successfully!", Severity.Success);
                        await LoadShoppingListAsync();
                        StateHasChanged();
                    }
                    else
                    {
                        Snackbar.Add("UPC not found.", Severity.Error);
                    }
                }
                catch (NoApiResultException ex)
                {
                    Snackbar.Add(ex.Message + ". Please add the UPC first.", Severity.Warning);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error adding UPC: {ex.Message}", Severity.Error);
                }
            }
        }
    }

    private async Task UpdateInCart(ShoppingListItem item)
    {
        await ShoppingListService.UpdateShoppingListItemAsync(item);
        Snackbar.Add("Item updated.", Severity.Success);
        await LoadShoppingListAsync();
        StateHasChanged();
    }

    private async Task EditItem(ShoppingListItem item)
    {
        var parameters = new DialogParameters { ["Item"] = item };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EditShoppingListItemDialog>("Edit Item Quantity", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data != null)
        {
            var updatedItem = (ShoppingListItem)result.Data;
            if (updatedItem != null)
            {
                await ShoppingListService.UpdateShoppingListItemAsync(updatedItem);
                Snackbar.Add("Item updated!", Severity.Success);
                await LoadShoppingListAsync();
                StateHasChanged();
            }
        }
    }

    private async Task RemoveItem(ShoppingListItem item)
    {
        var yesNo = await DialogService.ShowMessageBox(
            "Confirm Removal",
            "Are you sure you want to remove this item from the shopping list?",
            yesText: "Remove", cancelText: "Cancel");

        if (yesNo == true)
        {
            await ShoppingListService.RemoveItemFromShoppingListAsync(item.Id);
            await LoadShoppingListAsync();
            StateHasChanged();
        }
    }

    private async void ShowScanBarcodeDialog()
    {
        var dialog = await DialogService.ShowAsync<ScanBarcodeDialog>("Scan Barcode");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            string upc = result.Data.ToString();
            UpcData? upcData = null;

            var localResults = await UpcService.SearchLocalAsync(upc);
            if (localResults.Any())
            {
                upcData = localResults.First();
            }
            else
            {
                upcData = await UpcService.GetUpcDataByUpcAsync(upc);
            }

            if (upcData == null)
            {
                var parameters = new DialogParameters { ["Upc"] = upc };
                var editDialog = await DialogService.ShowAsync<EditUpcDialog>("Create UPC", parameters);
                var editResult = await editDialog.Result;
                if (!editResult.Canceled)
                {
                    upcData = editResult.Data as UpcData;
                }
            }

            if (upcData != null)
            {
                await AddItemToList(upcData.Upc);
            }
        }
    }

    private void Back() => NavigationManager.NavigateTo("/shoppinglists");

    private async Task PrintShoppingList()
    {
        var listName = shoppingList?.Name ?? "Shopping List";
        var itemsHtml = string.Join("", shoppingList.Items.Select(item => $@"
            <tr>
                <td><img src='{item.UpcData.ImageUrl}' height='50px' width='50px' /></td>
                <td>{item.UpcData.Title}</td>
                <td>{item.Quantity}</td>
                <td></td>
            </tr>"));

        var printHtml = $@"
        <!DOCTYPE html>
        <html>
        <head>
            <title>Print Shopping List</title>
            <style>
                body {{ font-family: Arial, sans-serif; }}
                h1 {{ text-align: center; }}
                table {{ width: 100%; border-collapse: collapse; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h1>{listName}</h1>
            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Item</th>
                        <th>Quantity</th>
                        <th>In Cart</th>
                    </tr>
                </thead>
                <tbody>
                    {itemsHtml}
                </tbody>
            </table>
        </body>
        </html>
        ";

        await JSRuntime.InvokeVoidAsync("printHtml", printHtml);
    }
}
