@page "/locations/{Id:int}"
@using SaveItForPantry.Data
@using SaveItForPantry.Services
@using MudBlazor
@using SaveItForPantry.Components.Items
@using SaveItForPantry.Components.ShoppingLists
@using Microsoft.JSInterop
@inject LocationService LocationService
@inject ItemService UpcService
@inject ShoppingListService ShoppingListService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<MudContainer Fixed="true" MaxWidth="MaxWidth.Large" Class="mt-4">
<MudText Typo="Typo.h3" GutterBottom="true">Pantry Dashboard</MudText>

@if (location is null)
{
        <MudAlert Severity="Severity.Info">Loading . . . </MudAlert>
}
else
{
    <MudText Typo="Typo.h4">@location.Name</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick='() => AddUpcToLocation("")'>Add Item to Location</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="ShowScanBarcodeDialog">Scan Barcode</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="Back">Back</MudButton>

    @if (location.LocationItems.Count == 0)
    {
            <MudAlert Severity="Severity.Info">No Items in This Location Yet.</MudAlert>
    }
    else
    {

            <MudTable Items="location.LocationItems" Class="fill-height" Hover="true" Breakpoint="Breakpoint.Md">
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>UPC</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Date Added</MudTh>
                <MudTh>Expiration Date</MudTh>
                <MudTh>Short ID</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Image">
                    <div class="thumbnail-container">
                        @if (!string.IsNullOrWhiteSpace(context.ItemData.ImageUrl))
                        {
                            <img src="@context.ItemData.ImageUrl" class="thumbnail" />
                            <img src="@context.ItemData.ImageUrl" class="enlarged" />
                        }
                        else
                        {
                            <div class="thumbnail">No Image</div>
                        }
                    </div>
                </MudTd>
                <MudTd DataLabel="UPC">@context.ItemData.Upc</MudTd>
                <MudTd DataLabel="Title">@context.ItemData.Title</MudTd>
                <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                <MudTd DataLabel="Date Added">@context.DateAdded.ToShortDateString()</MudTd>
                <MudTd DataLabel="Expiration Date">@context.ExpirationDate?.ToShortDateString()</MudTd>
                <MudTd DataLabel="Short ID">@context.ShortId</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" @onclick="() => UseItem(context)">Use</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" @onclick="() => EditLocationItem(context)">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" @onclick="() => PrintLabel(context)">Print Label</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" @onclick="() => RemoveLocationItem(context)">Remove</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
}
</MudContainer>
@code {
    [Parameter]
    public int Id { get; set; }

    private Location? location;

    protected override async Task OnInitializedAsync()
    {
        await LoadLocationDetailsAsync();
    }

    private async Task LoadLocationDetailsAsync()
    {
        location = await LocationService.GetLocationByIdAsync(Id);
    }

    private void Back() => NavigationManager.NavigateTo("/locations");

    private async Task AddUpcToLocation(string upc = "")
    {
        var parameters = new DialogParameters();
        if (!string.IsNullOrWhiteSpace(upc))
        {
            parameters["Upc"] = upc;
        }
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddUpcToLocationDialog>("Add UPC to Location", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var dialogData = (AddUpcToLocationDialog.DialogResultData)result.Data;
            if (dialogData != null)
            {
                try
                {
                    var upcData = await UpcService.GetUpcDataByUpcAsync(dialogData.Upc);
                    if (upcData != null)
                    {
                        await LocationService.AddUpcToLocationAsync(
                            Id,
                            upcData.Id,
                            dialogData.Quantity,
                            dialogData.ExpirationDate
                        );
                        Snackbar.Add("UPC added to location successfully!", Severity.Success);
                        await LoadLocationDetailsAsync();
                        StateHasChanged();
                    }
                    else
                    {
                        Snackbar.Add("UPC not found.", Severity.Error);
                    }
                }
                catch (NoApiResultException ex)
                {
                    Snackbar.Add(ex.Message + ". Please add the UPC first.", Severity.Warning);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error adding UPC: {ex.Message}", Severity.Error);
                }
            }
        }
    }

    private async void EditLocationItem(LocationItem item)
    {
        var parameters = new DialogParameters { ["LocationItem"] = item };
        var dialog = await DialogService.ShowAsync<EditLocationItemDialog>("Edit Item", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadLocationDetailsAsync();
            StateHasChanged();
        }
    }

    private async void UseItem(LocationItem item)
    {
        if (item.Quantity > 1)
        {
            await LocationService.DecrementItemQuantityAsync(item.Id);
            await LoadLocationDetailsAsync();
            StateHasChanged();
        }
        else
        {
            var parameters = new DialogParameters
            {
                ["Upc"] = item.ItemData.Upc
            };
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
            var dialog = await DialogService.ShowAsync<AddItemToShoppingListDialog>("Add to Shopping List", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                var dialogData = (AddItemToShoppingListDialog.DialogResultData)result.Data;
                if (dialogData != null)
                {
                    var upcData = await UpcService.GetUpcDataByUpcAsync(dialogData.Upc);
                    if (upcData != null)
                    {
                        await ShoppingListService.AddItemToShoppingListAsync(
                            dialogData.ShoppingListId,
                            upcData.Id,
                            dialogData.Quantity
                        );
                        await LocationService.RemoveUpcFromLocationAsync(item.Id);
                        await LoadLocationDetailsAsync();
                        StateHasChanged();
                        Snackbar.Add("Item added to shopping list and removed from location.", Severity.Success);
                    }
                }
            }
        }
    }

    private async void RemoveLocationItem(LocationItem item)
    {
        var yesNo = await DialogService.ShowMessageBox(
            "Confirm Removal",
            "Are you sure you want to remove this item from the location?",
            yesText: "Remove", cancelText: "Cancel");

        if (yesNo == true)
        {
            await LocationService.RemoveUpcFromLocationAsync(item.Id);
            await LoadLocationDetailsAsync();
            StateHasChanged();
        }
    }

    private async void ShowScanBarcodeDialog()
    {
        var dialog = await DialogService.ShowAsync<ScanBarcodeDialog>("Scan Barcode");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            string item = result.Data.ToString();
            ItemData? upcData = null;

            var localResults = await UpcService.SearchLocalAsync(item);
            if (localResults.Any())
            {
                upcData = localResults.First();
            }
            else
            {
                upcData = await UpcService.GetUpcDataByUpcAsync(item);
            }

            if (upcData == null)
            {
                var parameters = new DialogParameters { ["Upc"] = item };
                var editDialog = await DialogService.ShowAsync<EditItemDialog>("Create Item", parameters);
                var editResult = await editDialog.Result;
                if (!editResult.Canceled)
                {
                    upcData = editResult.Data as ItemData;
                }
            }

            if (upcData != null)
            {
                await AddUpcToLocation(upcData.Upc);
            }
        }
    }

    private async Task PrintLabel(LocationItem item)
    {
        var title = item.ItemData.Title;
        var quantity = item.Quantity.ToString();
        var added = item.DateAdded.ToString("MM/dd/yyyy");
        var expires = item.ExpirationDate?.ToString("MM/dd/yyyy") ?? "N/A";
        var loc = location?.Name ?? "Unknown";
        var id = item.ShortId;

        var labelHtml = string.Format(@"<!DOCTYPE html>
<html>
<head>
    <title>Item Label</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 8px;
            width: 60mm;
            height: 24mm;
            font-size: 12px;
        }}
        h1 {{
            font-size: 12px;
            margin: 0 0 4px 0;
            font-weight: bold;
            text-align: center;
        }}
        .columns {{
            display: flex;
            justify-content: space-between;
            gap: 10px;
        }}
        .column {{
            flex: 1;
            font-size: 11px;
            line-height: 1.2;
        }}
        .big-text {{
            font-size: 13px;
            font-weight: bold;
        }}
        @media print {{
            body {{
                margin: 0;
                padding: 8px;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
                size: 61mm 25mm;
            }}
            @page {{
                size: 60mm 24mm;
                margin: 0;
            }}
        }}
    </style>
</head>
<body onload='window.print(); setTimeout(() => window.close(), 1000);'>
    <div>
        <h1>{0}</h1>
        <div class='columns'>
            <div class='column'>
                Qty: {1}<br/>
                Added: {2}<br/>
                Location: {4}
            </div>
            <div class='column'>
                <span class='big-text'>Expires: {3}</span><br/>
                <span class='big-text'>ID: {5}</span>
            </div>
        </div>
    </div>
</body>
</html>", title, quantity, added, expires, loc, id);

        var escapedHtml = labelHtml.Replace("\\", "\\\\").Replace("'", "\\'").Replace("\n", "\\n").Replace("\r", "\\r");
        var jsCode = $@"var html = '{escapedHtml}';
var blob = new Blob([html], {{ type: 'text/html' }});
var url = URL.createObjectURL(blob);
var win = window.open(url, '_blank');
win.onload = function() {{
    win.print();
    setTimeout(function() {{
        win.close();
        URL.revokeObjectURL(url);
    }}, 1000);
}};";

        await JSRuntime.InvokeVoidAsync("eval", jsCode);
    }
}
