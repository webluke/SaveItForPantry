@page "/locations"
@using SaveItForPantry.Data
@using SaveItForPantry.Services
@using MudBlazor
@inject LocationService LocationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Pantry Dashboard</MudText>
<h3>Locations</h3>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddLocation">Add New Location</MudButton>

@if (locations is null)
{
    <p>Loading...</p>
}
else if (locations.Count == 0)
{
    <p>No locations found.</p>
}
else
{
    <MudTable Items="locations" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" @onclick="() => NavigateToDetails(context.Id)">View</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" @onclick="() => EditLocation(context)">Edit</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" @onclick="() => RemoveLocation(context)">Remove</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
</MudContainer>
@code {
    private List<Location>? locations;

    protected override async Task OnInitializedAsync()
    {
        await LoadLocationsAsync();
    }

    private async Task LoadLocationsAsync()
    {
        locations = await LocationService.GetLocationsAsync();
    }

    private void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo($"/locations/{id}");
    }

    private async Task AddLocation()
    {
        string newLocationName = "";
        var parameters = new DialogParameters { ["LocationName"] = newLocationName };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddLocationDialog>("Add New Location", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            newLocationName = result.Data.ToString();
            if (!string.IsNullOrWhiteSpace(newLocationName))
            {
                var newLocation = new Location { Name = newLocationName };
                await LocationService.CreateLocationAsync(newLocation);
                await LoadLocationsAsync();
                StateHasChanged();
            }
        }
    }

    private async void EditLocation(Location location)
    {
        var parameters = new DialogParameters { ["Location"] = location };
        var dialog = await DialogService.ShowAsync<EditLocationDialog>("Edit Location", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadLocationsAsync();
            StateHasChanged();
        }
    }

    private async void RemoveLocation(Location location)
    {
        var yesNo = await DialogService.ShowMessageBox(
            "Confirm Removal",
            $"Are you sure you want to remove the '{location.Name}' location and all its items?",
            yesText: "Remove", cancelText: "Cancel");

        if (yesNo == true)
        {
            await LocationService.DeleteLocationAsync(location.Id);
            await LoadLocationsAsync();
            StateHasChanged();
        }
    }
}
